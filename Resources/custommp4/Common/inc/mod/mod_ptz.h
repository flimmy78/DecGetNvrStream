#ifndef _MOD_PTZ_H_
#define _MOD_PTZ_H_

typedef void (*FPMODPTZUPDATE)(u32* pNums, u8** pData);

typedef struct
{
	u8 nChnNum;
	u8* pDevPath;
	FPMODPTZUPDATE pfUpdateProtocol;
}SPtzInitPara;

typedef enum
{
	EM_PTZ_BAUDRATE_300 	= 300,
	EM_PTZ_BAUDRATE_1200 	= 1200,
	EM_PTZ_BAUDRATE_2400 	= 2400,
	EM_PTZ_BAUDRATE_4800 	= 4800,
	EM_PTZ_BAUDRATE_9600 	= 9600,
	EM_PTZ_BAUDRATE_19200 	= 19200,
	EM_PTZ_BAUDRATE_38400 	= 38400,
	EM_PTZ_BAUDRATE_57600 	= 57600,
	EM_PTZ_BAUDRATE_115200 	= 115200,
	//
}EMPTZBAUDRATE;

typedef enum
{
	EM_PTZ_DATABIT_6 = 6,
	EM_PTZ_DATABIT_7 = 7,
	EM_PTZ_DATABIT_8 = 8,
	//
}EMPTZDATABIT;

typedef enum
{
	EM_PTZ_STOPBIT_1 = 1,
	EM_PTZ_STOPBIT_2 = 2,
	//
}EMPTZSTOPBIT;

typedef enum
{
	EM_PTZ_CRCCHECK_TYPE_NONE = 0,	//无校验
	EM_PTZ_CRCCHECK_TYPE_ODD,		//奇校验
	EM_PTZ_CRCCHECK_TYPE_EVEN,		//偶校验
	//
}EMPTZCRCCHECKTYPE;

typedef enum
{
	EM_PTZ_FLOWCTRL_NONE = 0,
	EM_PTZ_FLOWCTRL_HARDWARE,
	EM_PTZ_FLOWCTRL_XON_XOFF,
	//
}EMPTZFLOWCTRL;

#define MOD_PTZ_MOVE_SPEED_MAX 10
#define MOD_PTZ_MOVE_SPEED_MIN 1

typedef struct
{
	u8 nPresetId;
	u8 nSpeed;
	u32 nStayTime;
}SModPtzPresetPara;

typedef struct
{
	u64 nPresetId[4];
	u64 nTourId[4];
	SModPtzPresetPara nTourPresetId[32][256];//nTourPresetId[256][256];
}SModPtzTourPresetPara;

typedef struct
{
	u8 nChn;
	u8 nCamAddr;	
	EMPTZBAUDRATE emBaudRate;
	EMPTZDATABIT emDataBit;
	EMPTZSTOPBIT emStopBit;
	EMPTZCRCCHECKTYPE emCheckType;
	EMPTZFLOWCTRL emFlowCtrlType;
	u8 nProtocolName[20];
	u8 nEnable;
	SModPtzTourPresetPara sTourPresetPara;
}SModPtzParam;

typedef enum
{
	EM_PTZ_CMD_START_TILEUP = 0,
	EM_PTZ_CMD_START_TILEDOWN,
	EM_PTZ_CMD_START_PANLEFT,
	EM_PTZ_CMD_START_PANRIGHT,
	EM_PTZ_CMD_START_LEFTUP,
	EM_PTZ_CMD_START_LEFTDOWN,
	EM_PTZ_CMD_START_RIGHTUP,
	EM_PTZ_CMD_START_RIGHTDOWN,
	EM_PTZ_CMD_START_ZOOMWIDE,
	EM_PTZ_CMD_START_ZOOMTELE,
	EM_PTZ_CMD_START_FOCUSNEAR,
	EM_PTZ_CMD_START_FOCUSFAR,
	EM_PTZ_CMD_START_IRISSMALL,
	EM_PTZ_CMD_START_IRISLARGE,
	//
	EM_PTZ_CMD_STOP_TILEUP = 30,
	EM_PTZ_CMD_STOP_TILEDOWN,
	EM_PTZ_CMD_STOP_PANLEFT,
	EM_PTZ_CMD_STOP_PANRIGHT,
	EM_PTZ_CMD_STOP_LEFTUP,
	EM_PTZ_CMD_STOP_LEFTDOWN,
	EM_PTZ_CMD_STOP_RIGHTUP,
	EM_PTZ_CMD_STOP_RIGHTDOWN,
	EM_PTZ_CMD_STOP_ZOOMWIDE,
	EM_PTZ_CMD_STOP_ZOOMTELE,
	EM_PTZ_CMD_STOP_FOCUSNEAR,
	EM_PTZ_CMD_STOP_FOCUSFAR,
	EM_PTZ_CMD_STOP_IRISSMALL,
	EM_PTZ_CMD_STOP_IRISLARGE,
	//
	EM_PTZ_CMD_PRESET_SET = 100,
	EM_PTZ_CMD_PRESET_CLEAR,
	EM_PTZ_CMD_PRESET_GOTO,
	//
	EM_PTZ_CMD_AUTOSCAN_ON = 110,
	EM_PTZ_CMD_AUTOSCAN_OFF,
	EM_PTZ_CMD_SETLIMIT_LEFT,
	EM_PTZ_CMD_SETLIMIT_RIGHT,
	//
	EM_PTZ_CMD_AUTOPAN_ON = 120,
	EM_PTZ_CMD_AUTOPAN_OFF,
	//
	EM_PTZ_CMD_START_TOUR = 130,
	EM_PTZ_CMD_STOP_TOUR,
	EM_PTZ_CMD_ADD_TOUR,
	EM_PTZ_CMD_DELETE_TOUR,
	EM_PTZ_CMD_START_TOUR_AUTO,
	EM_PTZ_CMD_STOP_TOUR_AUTO,
	//
	EM_PTZ_CMD_START_PATTERN = 140,
	EM_PTZ_CMD_STOP_PATTERN,
	EM_PTZ_CMD_SET_START,
	EM_PTZ_CMD_SET_STOP,
	//
	EM_PTZ_CMD_AUX_ON = 150,
	EM_PTZ_CMD_AUX_OFF,
	//
	EM_PTZ_CMD_LIGHT_ON = 160,
	EM_PTZ_CMD_LIGHT_OFF,
	//
	EM_PTZ_CMD_WIPER_ON = 170,//xdc modify 0715
	EM_PTZ_CMD_WIPER_OFF,
	//
	EM_PTZ_CMD_SETSPEED = 253,
	EM_PTZ_CMD_NULL = 254,
}EMPTZCMDTYPE;

s32 ModPtzInit(SPtzInitPara* para);
s32 ModPtzDeinit(void);
s32 ModPtzSetParam(SModPtzParam* para);
//s32 ModPtzCtrl(u8 nChn, EMPTZCMDTYPE cmd, void* data); 	//注意：业务层使用data时，如果是单纯的数字参数，必须一律将data的类型定为32位的int
s32 ModPtzCtrl(u8 nChn, EMPTZCMDTYPE cmd, s32* data);

#endif //_MOD_PTZ_H_

